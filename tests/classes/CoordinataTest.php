<?php

require_once dirname ( __FILE__ ) . '/../../classes/Yagolands.php';
require_once dirname ( __FILE__ ) . '/../../classes/Coordinata.php';


/**
 * Test class for Coordinata.
 * Generated by PHPUnit on 2011-05-31 at 23:29:23.
 */
class CoordinataTest extends PHPUnit_Framework_TestCase {

    /**
     * @var Coordinata
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp () {
        $this->object = new Coordinata;

    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown () {
        
    }

    public static function provider () {
        return array (
            array ( 0, 0, array ( 'x' => 0, 'y' => 0 ) ),
            array ( 1, 0, array ( 'x' => 1, 'y' => 0 ) ),
            array ( 0, 1, array ( 'x' => 0, 'y' => 1 ) ),
            array ( -1, 0, array ( 'x' => -1, 'y' => 0 ) )
        );

    }

    /**
     * @dataProvider provider
     */
    public function testGetPosition ( $x, $y, $coordinata ) {
        $obj = new Coordinata ( array ( 'x' => $x, 'y' => $y ) );
        $this->assertEquals ( $obj->getPosition (), $coordinata );

    }

    public function testInitialPositionIsZeroZero () {
        $obj = new Coordinata ( );
        $this->assertEquals ( $obj->getPosition (), array ( 'x' => 0, 'y' => 0 ) );

    }

    public function testSetPosition ( ) {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete (
                'This test has not been implemented yet.'
        );

    }

    public static function providerMuoviASinistra () {
        return array (
            array ( 0, 0, array ( 'x' => -1, 'y' => 0 ) ),
            array ( 1, 0, array ( 'x' =>0, 'y' => 0 ) ),
            array ( 0, 1, array ( 'x' => -1, 'y' => 1 ) ),
            array ( -1, 0, array ( 'x' => -2, 'y' => 0 ) )
        );

    }

    /**
     * @dataProvider providerMuoviASinistra
     */
    public function testMuoviASinistra ($a, $b, $c) {
        $obj = new Coordinata ( array (
                    'x' => $a,
                    'y' => $b,
                        ) );
        $obj->muoviASinistra();
        $this->assertEquals ( $obj->getPosition (), $c );
    }

    public static function providerMuoviADestra () {
        return array (
            array ( 0, 0, array ( 'x' => 1, 'y' => 0 ) ),
            array ( 1, 0, array ( 'x' => 2, 'y' => 0 ) ),
            array ( 0, 1, array ( 'x' => 1, 'y' => 1 ) ),
            array ( -1, 0, array ( 'x' => 0, 'y' => 0 ) )
        );

    }

    /**
     * @dataProvider providerMuoviADestra
     */
    public function testMuoviADestra ($a, $b, $c) {
        $obj = new Coordinata ( array (
                    'x' => $a,
                    'y' => $b,
                        ) );
        $obj->muoviADestra();
        $this->assertEquals ( $obj->getPosition (), $c );

    }

    public static function providerInAltoASinistra () {
        return array (
            array ( 0, -1, array ( 'x' => -1, 'y' => 0 ) ),
            array ( 1, -1, array ( 'x' => 0, 'y' => 0 ) ),
            array ( 1, 0, array ( 'x' => 1, 'y' => 1 ) ),
            array ( 0, 0, array ( 'x' => 0, 'y' => 1 ) )
        );

    }

    /**
     * @dataProvider providerInAltoASinistra
     */
    public function testMuoviInAltoASinistra ( $a, $b, $c ) {
        $obj = new Coordinata ( array (
                    'x' => $a,
                    'y' => $b,
                        ) );
        $obj->muoviInAltoASinistra ();
        $this->assertEquals ( $obj->getPosition (), $c );

    }

    public static function providerInAltoADestra () {
        return array (
            array ( 0, 0, array ( 'x' => 1, 'y' => 1 ) ),
            array ( 0, -1, array ( 'x' => 0, 'y' => 0 ) ),
            array ( -1, 0, array ( 'x' => 0, 'y' => 1 ) ),
            array ( 1, -1, array ( 'x' => 1, 'y' => 0 ) )
        );

    }

    /**
     * @dataProvider providerInAltoADestra
     */
    public function testMuoviInAltoADestra ( $a, $b, $c ) {
        $obj = new Coordinata ( array (
                    'x' => $a,
                    'y' => $b,
                        ) );
        $obj->muoviInAltoADestra ();
        $this->assertEquals ( $obj->getPosition (), $c );

    }

    public static function providerInBassoASinistra () {
        return array (
            array ( 1, 1, array ( 'x' => 0, 'y' => 0 ) ),
            array ( 0, 0, array ( 'x' => 0, 'y' => -1 ) ),
            array ( 0, 1, array ( 'x' => -1, 'y' => 0 ) ),
            array ( 1, 0, array ( 'x' => 1, 'y' => -1 ) )
        );

    }

    /**
     * @dataProvider providerInBassoASinistra
     */
    public function testMuoviInBassoASinistra ( $a, $b, $c ) {
        $obj = new Coordinata ( array (
                    'x' => $a,
                    'y' => $b,
                        ) );
        $obj->muoviInBassoASinistra ();
        $this->assertEquals ( $obj->getPosition (), $c );

    }

    public static function providerInBassooADestra () {
        return array (
            array ( 0, 0, array ( 'x' => 1, 'y' => -1 ) ),
            array ( 0, 1, array ( 'x' => 0, 'y' => 0 ) ),
            array ( -1, 0, array ( 'x' => 0, 'y' => -1 ) ),
            array ( 1, 1, array ( 'x' => 1, 'y' => 0 ) )
        );

    }

    
    /**
     * @dataProvider providerInBassooADestra
     */
    public function testMuoviInBassoADestra ($a, $b, $c) {
        $obj = new Coordinata ( array (
                    'x' => $a,
                    'y' => $b,
                        ) );
        $obj->muoviInBassoADestra ();
        $this->assertEquals ( $obj->getPosition (), $c );
    }

}

?>
